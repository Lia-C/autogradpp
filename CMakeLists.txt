CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8 FATAL_ERROR)
CMAKE_POLICY(VERSION 2.8)

SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_POSITION_INDEPENDENT_CODE ON)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake" "${CMAKE_SOURCE_DIR}/cmake/FindCUDA")

### ATen
FIND_PATH(ATEN_INCLUDE_DIR ATen/ATen.h PATHS "${CMAKE_CURRENT_SOURCE_DIR}/pytorch/torch/lib/include/" NO_DEFAULT_PATH)
FIND_LIBRARY(ATEN_LIBRARY ATen PATHS "${CMAKE_CURRENT_SOURCE_DIR}/pytorch/torch/lib" NO_DEFAULT_PATH)

INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(ATEN DEFAULT_MSG ATEN_LIBRARY ATEN_INCLUDE_DIR)
MARK_AS_ADVANCED(ATEN_INCLUDE_DIR ATEN_LIBRARY)

SET(ATEN_INCLUDE_DIRS ${ATEN_INCLUDE_DIR})
SET(ATEN_LIBRARIES ${ATEN_LIBRARY})

ADD_LIBRARY(ATen SHARED IMPORTED)
SET_TARGET_PROPERTIES(ATen PROPERTIES
  IMPORTED_LOCATION ${ATEN_LIBRARY}
  INTERFACE_INCLUDE_DIRECTORIES ${ATEN_INCLUDE_DIR})

### CUDA
FIND_PACKAGE(CUDA)
IF(CUDA_FOUND)
  INCLUDE_DIRECTORIES(${CUDA_TOOLKIT_INCLUDE})
ENDIF(CUDA_FOUND)

### autogradpp
FIND_PACKAGE(PythonLibs REQUIRED)
INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(pytorch)

FILE(GLOB SRCS *.cpp)
ADD_LIBRARY(autogradpp STATIC ${SRCS})
ADD_EXECUTABLE(autograd_test test.cpp)

ADD_CUSTOM_COMMAND(
  TARGET autogradpp PRE_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/pytorch/build/lib*/torch/_C.*.so" "${CMAKE_BINARY_DIR}/libpythpp.so"
)
ADD_CUSTOM_COMMAND(
  TARGET autogradpp PRE_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/pytorch/build/lib*/torch/_dl.*.so" "${CMAKE_BINARY_DIR}/libpythpp_dl.so"
)
IF(CUDA_FOUND)
  ADD_CUSTOM_COMMAND(
    TARGET autogradpp PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/pytorch/build/lib*/torch/_nvrtc.*.so" "${CMAKE_BINARY_DIR}/libpythpp_nvrtc.so"
  )
ENDIF(CUDA_FOUND)
ADD_CUSTOM_COMMAND(
  TARGET autograd_test PRE_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy_directory "${CMAKE_CURRENT_SOURCE_DIR}/mnist" "${CMAKE_BINARY_DIR}/mnist"
)

TARGET_LINK_LIBRARIES(autogradpp ATen ${PYTHON_LIBRARIES}
  "${CMAKE_BINARY_DIR}/libpythpp.so"
  "${CMAKE_BINARY_DIR}/libpythpp_dl.so"
)
IF(CUDA_FOUND)
  TARGET_LINK_LIBRARIES(autogradpp
    "${CMAKE_BINARY_DIR}/libpythpp_nvrtc.so"
    -L${CUDA_TOOLKIT_ROOT_DIR}/lib64 cuda nvrtc
   )
ENDIF(CUDA_FOUND)

TARGET_LINK_LIBRARIES(autograd_test autogradpp)
